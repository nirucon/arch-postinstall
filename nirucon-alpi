#!/bin/bash

# Arch Linux Post Install script by Nicklas Rudolfsson
# https://github.com/nirucon
# The script is made for my own needs but is free to use and modify
# Focus of the script: suckless dwm setup, dmenu scripts, noir theming, music and content creation applications + some extra stuff
# Script version: 2024-07-31.03

# Function: Display welcome message
display_welcome() {
    echo -e "       _\n _ __ (_)_ __ _   _  ___ ___  _ ___\n| '_ \\| | '__| | | |/ __/ _ \\| '_  |\n| | | | | |  | |_| | (__| (_) | | | |\n|_| |_|_|_|   \\__,_|\\___\\___/|_| |_| \nArch Linux Post Install"
    echo "Welcome to NIRUCON-ALPI - Nicklas Rudolfsson's post-install script of 'My Suckless Setup' for Arch Linux."
    echo "This is tailored for MY own needs (focus on noir theming and music and media production). Feel free to use and modify, but I disclaim all responsibility; proceed at your own risk!"
    echo "Contact: n@rudolfsson.net"
    echo "Script version: 2024-07-31.01"
    echo ""
}

# Function: Prompt confirmation to proceed
confirm_proceed() {
    read -p "Are you sure you want to continue with the installation? [Y/n]: " confirm_install
    if [[ "$confirm_install" != [Nn]* ]]; then
        echo "Proceeding with installation..."
    else
        echo "Installation aborted."
        exit 0
    fi
}

# Function: Install necessary packages if not already installed
install_if_needed() {
    if ! command -v "$1" &>/dev/null; then
        echo "Installing $1..."
        sudo pacman -S --needed --noconfirm "$1"
    else
        echo "$1 is already installed"
    fi
}

# Function: Install yay if not already installed
install_yay() {
    if ! command -v yay &>/dev/null; then
        echo "Installing AUR helper yay..."
        cd /opt
        sudo git clone https://aur.archlinux.org/yay.git
        sudo chown -R $(whoami):$(whoami) yay
        cd yay
        makepkg -si
    else
        echo "yay is already installed"
    fi
}

# Function: Optimize system settings in pacman.conf
optimize_pacman_conf() {
    local file="/etc/pacman.conf"
    declare -A lines=(
        ["ParallelDownloads = 5"]="#ParallelDownloads = 5"
        ["Color"]="#Color"
        ["VerbosePkgLists"]="#VerbosePkgLists"
    )

    ensure_line() {
        local line="$1"
        local comment_line="$2"
        local section="$3"

        if grep -q "\[$section\]" "$file"; then
            if grep -q "^$line" "$file"; then
                echo "Line '$line' already present."
            elif grep -q "^$comment_line" "$file"; then
                echo "Uncommenting '$comment_line' to '$line'."
                sudo sed -i "s/^$comment_line/$line/" "$file"
            else
                echo "Adding '$line' to the section [$section]."
                sudo sed -i "/\[$section\]/a $line" "$file"
            fi
        else
            echo "Section [$section] not found. Adding section and line."
            echo -e "\n[$section]\n$line" | sudo tee -a "$file" >/dev/null
        fi
    }

    ensure_line "ILoveCandy" "#ILoveCandy" "options"
    for line in "${!lines[@]}"; do
        ensure_line "$line" "${lines[$line]}" "options"
    done
    echo "pacman.conf configuration update complete."
}

# Function: Install essential packages via pacman and aur yay
install_packages() 
    local packages_pacman=(
        xorg-server xorg-xinit xorg-xrandr xorg-xsetroot noto-fonts noto-fonts-emoji playerctl
        lxappearance qt6ct breeze-icons pcmanfm arandr nitrogen picom openssh cmus scrot gnupg
        pass brightnessctl mpv dunst unzip nano alsa-utils pavucontrol xarchiver xclip htop curl
        libnotify jq bc
    )
    local packages_yay=(
        ttf-font-awesome ttf-mononoki-nerd maim xautolock rofi fastfetch
    )

    echo "Installing essential packages via pacman..."
    sudo pacman -S --needed --noconfirm "${packages_pacman[@]}"

    echo "Installing essential packages via yay..."
    yay -S --noconfirm "${packages_yay[@]}"
}

# Function: Check for btrfs filesystem and install timeshift-autosnap if found
install_timeshift_if_btrfs() {
    if grep -q 'btrfs' /etc/fstab; then
        echo "btrfs filesystem detected. Installing timeshift-autosnap..."
        yay -S --needed --noconfirm timeshift-autosnap
    else
        echo "No btrfs filesystem detected. Skipping timeshift-autosnap installation."
    fi
}

# Function: Install optional packages based on user choice
install_optional() {
    local prompt="$1"
    local packages_pacman=("${!2}")
    local packages_yay=("${!3}")

    read -p "$prompt [Y/n]: " install_response
    install_response="${install_response,,}" # Convert to lowercase

    if [[ "$install_response" == "y" ]] || [[ -z "$install_response" ]]; then
        if [ ${#packages_pacman[@]} -ne 0 ]; then
            echo "Installing packages via pacman: ${packages_pacman[@]}"
            sudo pacman -S --needed --noconfirm "${packages_pacman[@]}"
        fi
        if [ ${#packages_yay[@]} -ne 0 ]; then
            echo "Installing packages via yay: ${packages_yay[@]}"
            yay -S --noconfirm "${packages_yay[@]}"
        fi
    else
        echo "Skipping installation for this option."
    fi
}

# Function: Clone and install nirucon-suckless-arch and various scripts and configurations
install_suckless() {
    read -p "Do you want to install Suckless dwm, dmenu, st, slock, and related configurations? [Y/n]: " choice
    if [[ "$choice" == [Yy]* ]] || [[ -z "$choice" ]]; then
        echo "Installing Suckless utilities and configurations..."
        mkdir -p ~/Git && git clone https://github.com/nirucon/nirucon-suckless-arch ~/Git/nirucon-suckless-arch
        mkdir -p ~/.config/suckless ~/.dwm ~/Music ~/Downloads ~/Pictures ~/Videos ~/Temp ~/.config/dunst

        declare -a repos=("nirubar-dwm" "dunstrc" "sverigesradio-dmenu" "srpod-dmenu" "dwmexit-dmenu" "havamal" "wifi-dmenu" "arch-optimizer-dmenu")
        for repo in "${repos[@]}"; do
            rm -rf ~/Git/$repo
            git clone https://github.com/nirucon/$repo ~/Git/$repo
        done

        cp -rf ~/Git/nirubar-dwm/ ~/Git/nirucon-suckless-arch/dmenu ~/Git/nirucon-suckless-arch/st ~/Git/nirucon-suckless-arch/slock ~/Git/nirucon-suckless-arch/dwm ~/.config/suckless
        cp -rf ~/Git/dunstrc/* ~/.config/dunst
        cp -fr ~/Git/nirucon-suckless-arch/nirucon-greeter ~/.config/

        declare -a suckless_dirs=("dwm" "dmenu" "slock" "st")
        for dir in "${suckless_dirs[@]}"; do
            sudo make -C ~/.config/suckless/$dir clean install
        done

        cp -f ~/Git/nirucon-suckless-arch/.xinitrc ~/
        cp -f ~/Git/nirucon-suckless-arch/autostart.sh ~/.dwm
        cp -f ~/Git/nirucon-suckless-arch/.bashrc ~/
        cp -f ~/Git/nirucon-suckless-arch/.bash_aliases ~/
        cp -rf ~/Git/nirucon-suckless-arch/nirucon-wallpapers ~/Pictures/
        sudo cp -f ~/Git/nirucon-suckless-arch/issue /etc/
        chmod +x ~/.dwm/autostart.sh ~/.config/suckless/nirubar-dwm/nirubar-dwm ~/.config/nirucon-greeter/greeter

        for repo in "${repos[@]:2}"; do
            sudo cp -f ~/Git/$repo/$repo /usr/local/bin/
            sudo chmod +x /usr/local/bin/$repo
            rm -rf ~/Git/$repo
        done

        echo "Suckless utilities and configurations installed successfully."
    else
        echo "Skipping Suckless utilities installation."
    fi
}

# Function: Install custom GRUB theme nirucon-death
install_grub_theme() {
    read -p "Do you want to install a custom grub theme - nirucon-death? [Y/n]: " grub_response
    grub_response=${grub_response,,}

    if [[ "$grub_response" =~ ^(yes|y| ) ]] || [[ -z "$grub_response" ]]; then
        echo "Installing custom grub theme..."
        git clone https://github.com/nirucon/nirucon-death-grubtheme ~/Git/nirucon-death-grubtheme
        sudo mkdir -p /boot/grub/themes
        sudo cp -r ~/Git/nirucon-death-grubtheme/nirucon-death /boot/grub/themes/nirucon-death
        sudo sed -i 's|^#GRUB_THEME=.*|GRUB_THEME="/boot/grub/themes/nirucon-death/theme.txt"|' /etc/default/grub
        sudo grub-mkconfig -o /boot/grub/grub.cfg
        echo "Custom grub theme installed."
    else
        echo "Skipping custom grub theme installation."
    fi
}

# Function: Install Noir Themes and Icons
install_themes_icons() {
    read -r -p "Do you want to install the GTK theme and icons? [Y/n]: " gtk_response
    gtk_response=${gtk_response,,}
    read -r -p "Do you want to install the Rofi custom theme? [Y/n]: " rofi_response
    rofi_response=${rofi_response,,}

    if [[ "$gtk_response" =~ ^(yes|y| ) ]] || [[ -z "$gtk_response" ]]; then
        echo "Installing Equilux theme and Papirus Dark Grey icons..."
        git clone https://github.com/ddnexus/equilux-theme
        if [ -d "equilux-theme" ]; then
            cd equilux-theme
            sudo ./install.sh
            cd ..
            rm -rf equilux-theme
        else
            echo "Failed to clone Equilux theme repository. Please check your internet connection."
            exit 1
        fi

        git clone https://github.com/Intika-KDE-Plasmoids/plasmoid-papirus-dark-grey-icon-theme
        if [ -d "plasmoid-papirus-dark-grey-icon-theme" ]; then
            sudo mkdir -p /usr/share/icons/Papirus-Dark-Grey
            sudo cp -r plasmoid-papirus-dark-grey-icon-theme/Papirus-Dark-Grey/* /usr/share/icons/Papirus-Dark-Grey/
            rm -rf plasmoid-papirus-dark-grey-icon-theme
        else
            echo "Failed to clone Papirus Dark Grey icons repository. Please check your internet connection."
            exit 1
        fi

        if command -v lxappearance >/dev/null 2>&1; then
            mkdir -p ~/.config/gtk-3.0/
            cat <<EOF >~/.config/gtk-3.0/settings.ini
[Settings]
gtk-theme-name=Equilux
gtk-icon-theme-name=Papirus-Dark-Grey
EOF
        else
            echo "lxappearance is not installed. Please install it to set the theme and icons."
        fi
    else
        echo "Skipping GTK theme and icons installation."
    fi

    if [[ "$rofi_response" =~ ^(yes|y| ) ]] || [[ -z "$rofi_response" ]]; then
        echo "Installing and setting the Rofi custom theme..."
        sudo mkdir -p /usr/share/rofi/themes
        mkdir -p ~/.config/rofi

        wget -O /tmp/nirucon.rasi https://raw.githubusercontent.com/nirucon/nirucon-rofi/master/nirucon.rasi
        if [ $? -eq 0 ]; then
            sudo mv -f /tmp/nirucon.rasi /usr/share/rofi/themes/
        else
            echo "Failed to download Rofi theme. Please check the URL or your internet connection."
            exit 1
        fi

        wget -O /tmp/config.rasi https://raw.githubusercontent.com/nirucon/nirucon-rofi/master/config.rasi
        if [ $? -eq 0 ]; then
            mv -f /tmp/config.rasi ~/.config/rofi/config.rasi
        else
            echo "Failed to download default Rofi configuration. Please check the URL or your internet connection."
            exit 1
        fi
    else
        echo "Skipping Rofi custom theme installation."
    fi
}

# Main function to execute the script
main() {
    display_welcome
    confirm_proceed

    install_if_needed "git"
    install_if_needed "wget"
    sudo pacman -S --needed --noconfirm base-devel
    install_yay

    read -p "Do you want to optimize and update the system before installing additional applications? [Y/n]: " optimize_choice
    if [[ "$optimize_choice" != [Nn]* ]]; then
        optimize_pacman_conf
        sudo pacman -S --needed --noconfirm pacman-contrib
        sudo systemctl enable paccache.timer
        sudo pacman -Syu
    fi

    install_packages
    install_timeshift_if_btrfs

    install_optional "Do you want to install Brave browser?" browser_pacman[@] browser_yay[@]
    install_optional "Do you want to install Spotify?" music_streaming_pacman[@] music_streaming_yay[@]
    install_optional "Do you want to install Nextcloud client?" nextcloud_sync_pacman[@] nextcloud_sync_yay[@]
    install_optional "Do you want to install DAW apps?" daw_apps_pacman[@] daw_apps_yay[@]
    install_optional "Do you want to install DAW plugins?" daw_plugins_pacman[@] daw_plugins_yay[@]
    install_optional "Do you want to install Web development apps?" web_dev_pacman[@] web_dev_yay[@]
    install_optional "Do you want to install Image and Video editing apps?" image_video_pacman[@] image_video_yay[@]
    install_optional "Do you want to install Communication apps?" communication_pacman[@] communication_yay[@]

    install_suckless
    install_grub_theme
    install_themes_icons

    echo "Cleaning up temporary files..."
    rm -fr ~/Git/nirucon-suckless-arch ~/Git/nirucon-death-grubtheme
    echo "NIRUCON-ALPI Arch Linux Post Install Script Completed - NOW BE CREATIVE!"
}

main
