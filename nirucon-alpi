#!/bin/bash

# Step 1: Welcome...
echo -e "       _\n _ __ (_)_ __ _   _  ___ ___  _ ___\n| '_ \\| | '__| | | |/ __/ _ \\| '_  |\\n| | | | | |  | |_| | (__|(_) | | | |\n|_| |_|_|_|   \\__,_|\\___\\___/|_| |_| \nArch Linux Post Install"

echo "Welcome to NIRUCON-ALPI - Nicklas Rudolfsson's post-install script of 'My Suckless Setup' for Arch Linux."
echo "This is tailored for MY own needs (focus on noir theming and music and media production). Feel free to use and modify, but I disclaim all responsibility; proceed at your own risk!"
echo "Contact: n@rudolfsson.net"
echo "Script version: 2024-07-28.01"
echo ""

# Confirmation to proceed with installation
read -p "Are you sure you want to continue with the installation? [Y/n]: " confirm_install
if [[ "$confirm_install" =~ ^[Yy]$ ]] || [[ -z "$confirm_install" ]]; then
    echo "Let's get started! You'll need to answer some Yes or No questions... Let's go!"

    # Base Programs Installation
    echo "Checking and installing necessary tools..."

    # Function to install a package if not already installed
    install_if_needed() {
        if ! command -v "$1" &> /dev/null; then
            echo "Installing $1..."
            sudo pacman -S --needed --noconfirm "$1"
        else
            echo "$1 is already installed"
        fi
    }

    install_if_needed git
    install_if_needed wget

    # Install yay and dependencies
    sudo pacman -S --needed --noconfirm base-devel
    if ! command -v yay &> /dev/null; then
        echo "Installing yay..."
        cd /opt
        sudo git clone https://aur.archlinux.org/yay.git
        sudo chown -R $(whoami):$(whoami) yay
        cd yay
        makepkg -si
    else
        echo "yay is already installed"
    fi

    # System optimization and update
    echo "The following optimizations and updates will be performed if you choose to optimize the system:"
    echo "1. Enable parallel downloads in pacman.conf"
    echo "2. Enable Color, ILoveCandy, and VerbosePkgLists in pacman.conf"
    echo "3. Install pacman-contrib for additional pacman utilities"
    echo "4. Enable paccache.timer for automatic cleaning of the package cache"
    echo "5. Update the system"

    read -p "Do you want to optimize and update the system before installing additional applications? [Y/n]: " optimize_choice
    if [[ "$optimize_choice" =~ ^[Yy]$ ]] || [[ -z "$optimize_choice" ]]; then
        echo "Optimizing system..."

        # Enable pacman.conf settings
        echo "Configuring /etc/pacman.conf..."
        sudo sed -i '/#ParallelDownloads = 5/s/^#//' /etc/pacman.conf
        sudo sed -i '/#Color/s/^#//' /etc/pacman.conf
        sudo sed -i '/#VerbosePkgLists/s/^#//' /etc/pacman.conf
        sudo sed -i '/#ILoveCandy/s/^#//' /etc/pacman.conf

        # Install pacman-contrib and enable paccache.timer
        sudo pacman -S --needed --noconfirm pacman-contrib
        sudo systemctl enable paccache.timer

        # Update the system
        sudo pacman -Syu
    fi

    # Install essential packages
    sudo pacman -S --needed --noconfirm nano vim
    echo "Creating ~/Git and cloning necessary repositories..."
    mkdir -p ~/Git && git clone https://github.com/nirucon/suckless-arch ~/Git/suckless-arch

    # Install various packages
    essential_packages=(
        xorg-server xorg-xinit xorg-xrandr xorg-xsetroot noto-fonts noto-fonts-emoji lxappearance qt6ct
        breeze-icons pcmanfm arandr nitrogen picom openssh cmus scrot gnupg pass brightnessctl mpv
        dunst unzip nano alsa-utils pavucontrol xarchiver xclip htop curl libnotify jq bc
    )
    sudo pacman -S --needed --noconfirm "${essential_packages[@]}"

    yay_packages=(
        ttf-font-awesome ttf-mononoki-nerd maim xautolock rofi fastfetch timeshift-autosnap
    )
    yay -S --noconfirm "${yay_packages[@]}"

    # Function to handle optional package installation
    install_optional() {
        read -p "$1 [Y/n]: " choice
        if [[ "$choice" =~ ^[Yy]$ ]] || [[ -z "$choice" ]]; then
            [[ ${#2[@]} -ne 0 ]] && sudo pacman -S --needed --noconfirm "${2[@]}"
            [[ ${#3[@]} -ne 0 ]] && yay -S --noconfirm "${3[@]}"
        fi
    }

    # Prompt for optional applications
    install_optional "Do you want to install Brave browser?" "" "brave-bin"
    install_optional "Do you want to install Spotify?" "" "spotify"
    install_optional "Do you want to install Nextcloud client?" "nextcloud-client" ""
    install_optional "Do you want to install DAW apps?" "" "reaper qpwgraph yabridge yabridgectl realtime-privileges"

    # DAW Apps configuration
    if command -v pipewire &> /dev/null; then
        echo "Creating Pipewire latency scripts..."
        sudo bash -c 'echo "PIPEWIRE_LATENCY=128/48000 reaper" > /usr/local/bin/reaper-pipewire-latency-128'
        sudo bash -c 'echo "PIPEWIRE_LATENCY=256/48000 reaper" > /usr/local/bin/reaper-pipewire-latency-256'
        sudo chmod +x /usr/local/bin/reaper-pipewire-latency-128 /usr/local/bin/reaper-pipewire-latency-256
    fi

    sudo groupadd -f realtime
    sudo usermod -a -G realtime $USER

    install_optional "Do you want to install DAW plugins?" "" "pro-audio lv2-plugins vst-plugins vst3-plugins"
    install_optional "Do you want to install Web development apps?" "filezilla bluefish" ""
    install_optional "Do you want to install Image and Video editing apps?" "obs-studio kdenlive gimp" ""
    install_optional "Do you want to install Communication apps?" "thunderbird irssi signal-desktop" ""

    # Custom grub theme installation
    read -p "Do you want to install a custom grub theme - nirucon-death? [Y/n]: " choice
    if [[ "$choice" =~ ^[Yy]$ ]] || [[ -z "$choice" ]]; then
        echo "Installing custom grub theme..."
        git clone https://github.com/nirucon/nirucon-death-grubtheme ~/Git/nirucon-death-grubtheme
        sudo mkdir -p /boot/grub/themes
        sudo cp -r ~/Git/nirucon-death-grubtheme/nirucon-death /boot/grub/themes/nirucon-death
        sudo sed -i 's|^#GRUB_THEME=.*|GRUB_THEME="/boot/grub/themes/nirucon-death/theme.txt"|' /etc/default/grub
        sudo grub-mkconfig -o /boot/grub/grub.cfg
        echo "Custom grub theme installed."
    fi

    # Suckless software installation
    read -p "Do you want to install Suckless dwm, dmenu, st, slock, nirubar-dwm, dmenu scripts, my dot-files and some related stuff? [Y/n]: " choice
    if [[ "$choice" =~ ^[Yy]$ ]] || [[ -z "$choice" ]]; then
        echo "Installing Suckless software and configurations..."

        mkdir -p ~/.config/suckless ~/.dwm ~/.config/dunst ~/Git

        git_repos=(
            "https://github.com/nirucon/nirubar-dwm"
            "https://github.com/nirucon/dunstrc"
        )

        for repo in "${git_repos[@]}"; do
            git clone "$repo" ~/Git/$(basename "$repo")
        done

        cp -r ~/Git/nirubar-dwm ~/Git/suckless-arch/{dmenu,st,slock,dwm} ~/.config/suckless
        cp -r ~/Git/dunstrc/* ~/.config/dunst

        for dir in dwm dmenu slock st; do
            sudo make -C ~/.config/suckless/"$dir" clean install
        done

        cp ~/Git/suckless-arch/{.xinitrc,.bashrc,.bash_aliases,issue} ~/
        cp ~/Git/suckless-arch/autostart.sh ~/.dwm/
        chmod +x ~/.dwm/autostart.sh ~/.config/suckless/nirubar-dwm/nirubar-dwm-status
        sudo cp ~/Git/suckless-arch/issue /etc/issue

        echo "Suckless software and configurations installed."
    fi

    echo "Installation complete. Please restart your computer."
else
    echo "Installation cancelled."
fi
