#!/bin/bash

# nirucon-alpi - Arch Linux Post Installation script by Nicklas Rudolfsson
# https://github.com/nirucon
# Script version 2024-07-31.02

# 1: Welcome

# Function to display the welcome message
display_welcome() {
    echo -e "       _\n _ __ (_)_ __ _   _  ___ ___  _ ___\n| '_ \\| | '__| | | |/ __/ _ \\| '_  |\n| | | | | |  | |_| | (__| (_) | | | |\n|_| |_|_|_|   \\__,_|\\___\\___/|_| |_| \nArch Linux Post Install"
    echo "Welcome to NIRUCON-ALPI - Nicklas Rudolfsson's post-install script of 'My Suckless Setup' for Arch Linux."
    echo "This is tailored for MY own needs (focus on noir theming and music and media production). Feel free to use and modify, but I disclaim all responsibility; proceed at your own risk!"
    echo "Contact me via: n@rudolfsson.net"
    echo "Script version: 2024-07-31.01"
    echo ""
}

# Function to confirm continuation of the installation
confirm_installation() {
    read -p "Are you sure you want to continue with the installation? [Y/n]: " confirm_install
    if [[ "$confirm_install" =~ ^[Nn]$ ]]; then
        echo "Too bad! Maybe another time ;)"
        exit 0
    else
        echo "Alright, let's have some fun! Keep an eye on the screen as you will need to answer some Yes or No questions... Let's go!"
    fi
}

display_welcome
confirm_installation

# 2: Install "core" packages and other necessary packages and applications

# Function to install a package if it's not already installed
install_if_needed() {
    local package=$1
    if ! command -v "$package" &>/dev/null; then
        echo "Installing $package..."
        sudo pacman -S --needed --noconfirm "$package"
    else
        echo "$package is already installed"
    fi
}

# Function to install yay (AUR helper)
install_yay() {
    if ! command -v yay &>/dev/null; then
        echo "Installing AUR helper yay..."
        cd /opt || exit
        sudo git clone https://aur.archlinux.org/yay.git
        sudo chown -R $(whoami):$(whoami) yay
        cd yay || exit
        makepkg -si
        cd ~ || exit
    else
        echo "yay is already installed"
    fi
}

echo "Checking and installing (if needed) git, wget, and AUR helper yay along with dependencies..."
install_if_needed "git"
install_if_needed "wget"

echo "Installing base-devel..."
sudo pacman -S --needed --noconfirm base-devel

install_yay

# 3: System optimization

echo "The following optimizations and updates will be performed if you choose to optimize the system:"
echo "1. Enable parallel downloads in pacman.conf"
echo "2. Enable Color, ILoveCandy, and VerbosePkgLists in pacman.conf"
echo "3. Install pacman-contrib for additional pacman utilities"
echo "4. Enable paccache.timer for automatic cleaning of the package cache"
echo "5. Update the system"

read -p "Do you want to optimize and update the system before installing additional applications? [Y/n]: " optimize_choice
if [[ "$optimize_choice" != [Nn]* ]]; then
    echo "Optimizing system..."

    # Function to ensure a line is present in a given section of a file
    ensure_line() {
        local line="$1"
        local file="$2"
        local section="$3"
        
        if grep -q "\[$section\]" "$file"; then
            if ! grep -q "^$line" "$file"; then
                echo "Adding '$line' to the section [$section]."
                sudo sed -i "/\[$section\]/a $line" "$file"
            fi
        else
            echo "Section [$section] not found. Adding section and line."
            echo -e "\n[$section]\n$line" | sudo tee -a "$file" >/dev/null
        fi
    }

    file="/etc/pacman.conf"

    # Enable parallel downloads, Color, ILoveCandy, and VerbosePkgLists in pacman.conf
    echo "Enabling parallel downloads, Color, ILoveCandy, and VerbosePkgLists in pacman.conf..."
    ensure_line "ParallelDownloads = 5" "$file" "options"
    ensure_line "Color" "$file" "options"
    ensure_line "ILoveCandy" "$file" "options"
    ensure_line "VerbosePkgLists" "$file" "options"

    echo "pacman.conf configuration update complete."

    # Install pacman-contrib and enable paccache.timer
    echo "Installing pacman-contrib and enabling paccache.timer for automatic package cache cleaning..."
    sudo pacman -S --needed --noconfirm pacman-contrib
    sudo systemctl enable --now paccache.timer

    # Update the system
    echo "Updating the system..."
    sudo pacman -Syu
else
    echo "Skipping system optimization."
fi

# 4: Installation of essential packages and applications

# Function to install packages
install_packages() {
	local package_manager="$1"
	shift
	local packages=("$@")
	echo "Installing packages via $package_manager: ${packages[*]}"
	if [[ "$package_manager" == "pacman" ]]; then
		sudo pacman -S --needed --noconfirm "${packages[@]}"
	elif [[ "$package_manager" == "yay" ]]; then
		yay -S --needed --noconfirm "${packages[@]}"
	fi
}

# Essential packages
essential_packages=(
	xorg-server xorg-xinit xorg-xrandr xorg-xsetroot noto-fonts noto-fonts-emoji playerctl
	lxappearance qt6ct breeze-icons pcmanfm arandr nitrogen picom openssh cmus scrot gnupg
	pass brightnessctl mpv dunst unzip nano alsa-utils pavucontrol xarchiver xclip htop curl
	libnotify jq bc vim nano
)

# AUR packages
aur_packages=(
	ttf-font-awesome ttf-mononoki-nerd maim xautolock rofi fastfetch
)

# Install essential packages via pacman
install_packages "pacman" "${essential_packages[@]}"

# Install AUR packages via yay
install_packages "yay" "${aur_packages[@]}"

# Check if btrfs and install timeshift-autosnap
if grep -q 'btrfs' /etc/fstab; then
	echo "btrfs filesystem detected. Installing timeshift-autosnap..."
	install_packages "yay" "timeshift-autosnap"
else
	echo "No btrfs filesystem detected. Skipping timeshift-autosnap installation."
fi

# 5: Optional installations of packages and applications

echo "Now you will go through a series of options for various categories of applications that can be installed based on your needs."

# Function to handle user choices for optional packages
install_optional() {
    local prompt="$1"
    shift
    local packages=("$@")

    read -p "$prompt [Y/n]: " install_response
    install_response="${install_response,,}" # Convert to lowercase

    if [[ "$install_response" == "y" ]] || [[ -z "$install_response" ]]; then
        for package in "${packages[@]}"; do
            if pacman -Qi "$package" &>/dev/null || yay -Qi "$package" &>/dev/null; then
                echo "$package is already installed"
            else
                if sudo pacman -Ssq "^$package\$" &>/dev/null; then
                    echo "Installing $package via pacman..."
                    sudo pacman -S --needed --noconfirm "$package"
                else
                    echo "Installing $package via yay..."
                    yay -S --needed --noconfirm "$package"
                fi
            fi
        done
        return 0
    else
        echo "Skipping installation for this option."
        return 1
    fi
}

# Internet browser
install_optional "Do you want to install Brave browser?" brave-bin

# Music streaming
install_optional "Do you want to install Spotify?" spotify

# Nextcloud file synchronization
install_optional "Do you want to install Nextcloud client?" nextcloud-client

# DAW Apps
if install_optional "Do you want to install DAW apps?" reaper qpwgraph yabridge yabridgectl realtime-privileges; then
    # DAW Apps configuration if DAW apps are installed
    if command -v pipewire &>/dev/null; then
        echo "Configuring Pipewire latency scripts..."
        sudo bash -c 'echo "PIPEWIRE_LATENCY=128/48000 reaper" > /usr/local/bin/reaper-pipewire-latency-128'
        sudo bash -c 'echo "PIPEWIRE_LATENCY=256/48000 reaper" > /usr/local/bin/reaper-pipewire-latency-256'
        sudo chmod +x /usr/local/bin/reaper-pipewire-latency-128 /usr/local/bin/reaper-pipewire-latency-256
    fi

    echo "Configuring realtime-privileges..."
    if ! grep -q '^realtime:' /etc/group; then
        sudo groupadd realtime
    fi
    sudo usermod -a -G realtime "$USER"
fi

# DAW Plugins
install_optional "Do you want to install DAW plugins?" pro-audio lv2-plugins vst-plugins vst3-plugins

# Web Development
install_optional "Do you want to install Web development apps?" filezilla bluefish

# Image and Video Editing
install_optional "Do you want to install Image and Video editing apps?" obs-studio kdenlive gimp

# Communication
install_optional "Do you want to install Communication apps?" thunderbird irssi signal-desktop


# 6: nirucon-suckles-arch setup

read -p "Do you want to install Suckless dwm, dmenu, st, slock, nirubar-dwm, dmenu scripts, my dot-files and some related stuff? [Y/n]: " choice
if [[ "$choice" == [Yy]* ]] || [[ -z "$choice" ]]; then
	echo "Installing Suckless etc..."

	# Clone nirucon-suckless-arch
	echo "Creating ~/Git (if it does not exist) and cloning the nirucon suckless-arch repository..."
	mkdir -p ~/Git && git clone https://github.com/nirucon/nirucon-suckless-arch ~/Git/nirucon-suckless-arch

	# Create necessary directories
	mkdir -p ~/.config/suckless ~/.dwm ~/Music ~/Downloads ~/Pictures ~/Videos ~/Temp ~/.config/dunst

	# Clone some additional script repositories and overwrite the existing repositories

	# nirubar-dwm - status bar for dwm
	rm -rf ~/Git/nirubar-dwm
	git clone https://github.com/nirucon/nirubar-dwm ~/Git/nirubar-dwm

	# dunstrc - customized notifications
	rm -rf ~/Git/dunstrc
	git clone https://github.com/nirucon/dunstrc ~/Git/dunstrc

	# Copy suckless related files and overwrite existing files
	cp -rf ~/Git/nirubar-dwm/ ~/Git/nirucon-suckless-arch/dmenu ~/Git/nirucon-suckless-arch/st ~/Git/nirucon-suckless-arch/slock ~/Git/nirucon-suckless-arch/dwm ~/.config/suckless
	cp -rf ~/Git/dunstrc/* ~/.config/dunst
	cp -fr ~/Git/nirucon-suckless-arch/nirucon-greeter ~/.config/

	# Compile and install suckless software
	sudo make -C ~/.config/suckless/dwm clean install
	sudo make -C ~/.config/suckless/dmenu clean install
	sudo make -C ~/.config/suckless/slock clean install
	sudo make -C ~/.config/suckless/st clean install

	# Copy configurations and dot files, overwriting existing files
	cp -f ~/Git/nirucon-suckless-arch/.xinitrc ~/
	cp -f ~/Git/nirucon-suckless-arch/autostart.sh ~/.dwm
	cp -f ~/Git/nirucon-suckless-arch/.bashrc ~/
	cp -f ~/Git/nirucon-suckless-arch/.bash_aliases ~/
	cp -rf ~/Git/nirucon-suckless-arch/nirucon-wallpapers ~/Pictures/
	sudo cp -f ~/Git/nirucon-suckless-arch/issue /etc/
	chmod +x ~/.dwm/autostart.sh ~/.config/suckless/nirubar-dwm/nirubar-dwm ~/.config/nirucon-greeter/greeter

	# sverigesradio-dmenu - dmenu script for sveriges radio
	echo "Cloning and installing the 'sverigesradio-dmenu' script..."
	rm -rf ~/Git/sverigesradio-dmenu
	git clone https://github.com/nirucon/sverigesradio-dmenu ~/Git/sverigesradio-dmenu
	cd ~/Git/sverigesradio-dmenu
	sudo cp -f sverigesradio-dmenu /usr/local/bin/
	sudo chmod +x /usr/local/bin/sverigesradio-dmenu
	cd ~
	rm -rf ~/Git/sverigesradio-dmenu
	echo "The 'sverigesradio-dmenu' script has been cloned, installed to /usr/local/bin, made executable, and the repository has been removed."

	# srpod-dmenu - dmenu script for sr play pod
	echo "Cloning and installing the 'srpod-dmenu' script..."
	rm -rf ~/Git/srpod-dmenu
	git clone https://github.com/nirucon/srpod-dmenu ~/Git/srpod-dmenu
	cd ~/Git/srpod-dmenu
	sudo cp -f srpod-dmenu /usr/local/bin/
	sudo chmod +x /usr/local/bin/srpod-dmenu
	cd ~
	rm -rf ~/Git/srpod-dmenu
	echo "The 'srpod-dmenu' script has been cloned, installed to /usr/local/bin, made executable, and the repository has been removed."

	# dwmexit-dmenu - dmenu script for suspend, logout, restart, reboot
	echo "Installing dwmexit-dmenu script..."
	rm -rf ~/Git/dwmexit-dmenu
	git clone https://github.com/nirucon/dwmexit-dmenu ~/Git/dwmexit-dmenu
	cd ~/Git/dwmexit-dmenu
	sudo cp -f dwmexit-dmenu /usr/local/bin/
	sudo chmod +x /usr/local/bin/dwmexit-dmenu
	cd ~
	rm -rf ~/Git/dwmexit-dmenu
	echo "The 'dwmexit-dmenu' script has been installed and the repository has been removed."

	# havamal - script for random quotes in .bashrc
	echo "Installing havamal script..."
	rm -rf ~/Git/havamal
	git clone https://github.com/nirucon/havamal ~/Git/havamal
	cp -fr havamal ~/.config/
	chmod +x ~/.local/havamal/havamal
	cd ~
	rm -rf ~/Git/havamal
	echo "The 'havamal' script has been installed and the repository has been removed."

	# wifi-dmenu - script for wifi in dmenu
	echo "Installing wifi-dmenu script..."
	rm -rf ~/Git/wifi-dmenu
	git clone https://github.com/nirucon/wifi-dmenu ~/Git/wifi-dmenu
	cd ~/Git/wifi-dmenu
	sudo cp -f wifi-dmenu /usr/local/bin/
	sudo chmod +x /usr/local/bin/wifi-dmenu
	cd ~
	rm -rf ~/Git/wifi-dmenu
	echo "The 'wifi-dmenu' script has been installed and the repository has been removed."

	# arch-optimizer-dmenu - script for optimizing arch linux in dmenu
	echo "Installing arch-optimizer-dmenu script..."
	rm -rf ~/Git/arch-optimizer-dmenu
	git clone https://github.com/nirucon/arch-optimizer-dmenu ~/Git/arch-optimizer-dmenu
	cd ~/Git/arch-optimizer-dmenu
	sudo cp -f arch-optimizer-dmenu /usr/local/bin/
	sudo chmod +x /usr/local/bin/arch-optimizer-dmenu
	cd ~
	rm -rf ~/Git/arch-optimizer-dmenu
	echo "The 'arch-optimizer-dmenu' script has been installed and the repository has been removed."

	# cmus themes - themes for cmus terminal music player
	echo "Setting up cmus themes..."
	mkdir -p ~/.config/cmus/
	cp -f ~/Git/suckless-arch/.config/cmus/* ~/.config/cmus/
fi

# 7: Theming

# Install custom grub theme
read -p "Do you want to install a custom grub theme - nirucon-death? [Y/n]: " grub_response
grub_response=${grub_response,,} # Convert to lowercase

if [[ "$grub_response" =~ ^(yes|y| ) ]] || [[ -z "$grub_response" ]]; then
	echo "Installing custom grub theme..."

	# Clone the theme repository
	git clone https://github.com/nirucon/nirucon-death-grubtheme ~/Git/nirucon-death-grubtheme

	# Create grub themes directory if it doesn't exist
	sudo mkdir -p /boot/grub/themes

	# Copy the theme to grub themes directory
	sudo cp -r ~/Git/nirucon-death-grubtheme/nirucon-death /boot/grub/themes/nirucon-death

	# Update grub configuration to use the new theme
	sudo sed -i 's|^#GRUB_THEME=.*|GRUB_THEME="/boot/grub/themes/nirucon-death/theme.txt"|' /etc/default/grub

	# Apply grub configuration
	sudo grub-mkconfig -o /boot/grub/grub.cfg

	echo "Custom grub theme installed."
else
	echo "Skipping custom grub theme installation."
fi

# Install Noir Themes and Icons
echo "Install Noir Themes and Icons"

# Prompt user for GTK themes and icons installation
read -r -p "Do you want to install the GTK theme and icons? [Y/n]: " gtk_response
gtk_response=${gtk_response,,} # Convert to lowercase

# Prompt user for Rofi theme installation
read -r -p "Do you want to install the Rofi custom theme? [Y/n]: " rofi_response
rofi_response=${rofi_response,,} # Convert to lowercase

# Install GTK theme and icons if user agrees
if [[ "$gtk_response" =~ ^(yes|y| ) ]] || [[ -z "$gtk_response" ]]; then
	echo "Installing Equilux theme and Papirus Dark Grey icons..."

	# Install Equilux theme
	git clone https://github.com/ddnexus/equilux-theme
	if [ -d "equilux-theme" ]; then
		cd equilux-theme
		sudo ./install.sh
		cd ..
		rm -rf equilux-theme
		echo "Equilux theme installed successfully."
	else
		echo "Failed to clone Equilux theme repository. Please check your internet connection."
		exit 1
	fi

	# Install Papirus Dark Grey icons
	git clone https://github.com/Intika-KDE-Plasmoids/plasmoid-papirus-dark-grey-icon-theme
	if [ -d "plasmoid-papirus-dark-grey-icon-theme" ]; then
		sudo mkdir -p /usr/share/icons/Papirus-Dark-Grey
		sudo cp -r plasmoid-papirus-dark-grey-icon-theme/Papirus-Dark-Grey/* /usr/share/icons/Papirus-Dark-Grey/
		rm -rf plasmoid-papirus-dark-grey-icon-theme
		echo "Papirus Dark Grey icons installed successfully."
	else
		echo "Failed to clone Papirus Dark Grey icons repository. Please check your internet connection."
		exit 1
	fi

	# Set Equilux theme and Papirus Dark Grey icons as default using lxappearance
	if command -v lxappearance >/dev/null 2>&1; then
		mkdir -p ~/.config/gtk-3.0/
		cat <<EOF >~/.config/gtk-3.0/settings.ini
[Settings]
gtk-theme-name=Equilux
gtk-icon-theme-name=Papirus-Dark-Grey
EOF
		echo "GTK theme and icons set successfully!"
	else
		echo "lxappearance is not installed. Please install it to set the theme and icons."
	fi
else
	echo "Skipping GTK theme and icons installation."
fi

# Install Rofi theme if user agrees
if [[ "$rofi_response" =~ ^(yes|y| ) ]] || [[ -z "$rofi_response" ]]; then
	echo "Installing and setting the Rofi custom theme..."

	sudo mkdir -p /usr/share/rofi/themes
	mkdir -p ~/.config/rofi

	wget -O /tmp/nirucon.rasi https://raw.githubusercontent.com/nirucon/nirucon-rofi/master/nirucon.rasi
	if [ $? -eq 0 ]; then
		sudo mv -f /tmp/nirucon.rasi /usr/share/rofi/themes/
		echo "Rofi theme downloaded and moved successfully."
	else
		echo "Failed to download Rofi theme. Please check the URL or your internet connection."
		exit 1
	fi

	wget -O /tmp/config.rasi https://raw.githubusercontent.com/nirucon/nirucon-rofi/master/config.rasi
	if [ $? -eq 0 ]; then
		mv -f /tmp/config.rasi ~/.config/rofi/config.rasi
		echo "Rofi default configuration downloaded and set successfully."
	else
		echo "Failed to download default Rofi configuration. Please check the URL or your internet connection."
		exit 1
	fi
else
	echo "Skipping Rofi custom theme installation."
fi

# 8: Final clean up
echo "Cleaning up temporary files..."
rm -fr ~/Git/dunstrc ~/Git/nirubar-dwm ~/Git/nirucon-suckless-arch ~/Git/nirucon-death-grubtheme
echo "All cloned and downloaded files in ~/Git have been deleted, except for the nirucon-alpi directory. Check for new versions of the script at https://github.com/nirucon/nirucon-alpi"

# 9: Good buy
echo "NIRUCON-ALPI Arch Linux Post Install Script Completed - NOW BE CREATIVE!"
