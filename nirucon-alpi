#!/bin/bash

# Arch Linux Post Install script by Nicklas Rudolfsson
# https://github.com/nirucon
# The script is made for my own needs but is free to use and modify
# Focus of the script: suckless dwm setup, dmenu scripts, noir theming, music and content creation applications + some extra stuff

# Function: Check for internet connection
check_internet_connection() {
    if ping -q -c 1 -W 1 google.com >/dev/null; then
        echo -e "\e[32mInternet connection: OK\e[0m"
    else
        echo -e "\e[31mInternet connection: DOWN\e[0m"
        echo "This script requires an active internet connection. Please resolve the issue and run the script again."
        exit 1
    fi
}

# Function: Display welcome message
display_welcome() {
    echo -e "       _\n _ __ (_)_ __ _   _  ___ ___  _ ___\n| '_ \\| | '__| | | |/ __/ _ \\| '_  |\n| | | | | |  | |_| | (__| (_) | | | |\n|_| |_|_|_|   \\__,_|\\___\\___/|_| |_| \nArch Linux Post Install"
    echo "Welcome to NIRUCON-ALPI - Nicklas Rudolfsson's post-install script of 'My Suckless Setup' for Arch Linux."
    echo "This is tailored for MY own needs (focus on noir theming and music and media production). Feel free to use and modify, but I disclaim all responsibility; proceed at your own risk!"
    echo "Contact: n@rudolfsson.net"
    echo "Script version: 2024-08-01.02"
    echo ""
}

# Function: Prompt confirmation to proceed
confirm_proceed() {
    read -p "Are you sure you want to continue with the installation? [Y/n]: " confirm_install
    if [[ "$confirm_install" != [Nn]* ]]; then
        echo "Proceeding with installation..."
    else
        echo "Installation aborted."
        exit 0
    fi
}

# Function: Install necessary packages if not already installed
install_if_needed() {
    if ! command -v "$1" &>/dev/null; then
        echo "Installing $1..."
        sudo pacman -S --needed --noconfirm "$1"
    else
        echo "$1 is already installed"
    fi
}

# Function: Install yay if not already installed
install_yay() {
    if ! command -v yay &>/dev/null; then
        echo "Installing AUR helper yay..."
        cd /opt
        sudo git clone https://aur.archlinux.org/yay.git
        sudo chown -R $(whoami):$(whoami) yay
        cd yay
        makepkg -si
    else
        echo "yay is already installed"
    fi
}

# Function: Optimize system settings in pacman.conf
optimize_pacman_conf() {
    local file="/etc/pacman.conf"
    declare -A lines=(
        ["ParallelDownloads = 5"]="#ParallelDownloads = 5"
        ["Color"]="#Color"
        ["VerbosePkgLists"]="#VerbosePkgLists"
    )

    ensure_line() {
        local line="$1"
        local comment_line="$2"
        local section="$3"

        if grep -q "\[$section\]" "$file"; then
            if grep -q "^$line" "$file"; then
                echo "Line '$line' already present."
            elif grep -q "^$comment_line" "$file"; then
                echo "Uncommenting '$comment_line' to '$line'."
                sudo sed -i "s/^$comment_line/$line/" "$file"
            else
                echo "Adding '$line' to the section [$section]."
                sudo sed -i "/\[$section\]/a $line" "$file"
            fi
        else
            echo "Section [$section] not found. Adding section and line."
            echo -e "\n[$section]\n$line" | sudo tee -a "$file" >/dev/null
        fi
    }

    ensure_line "ILoveCandy" "#ILoveCandy" "options"
    for line in "${!lines[@]}"; do
        ensure_line "$line" "${lines[$line]}" "options"
    done
    echo "pacman.conf configuration update complete."
}

# Function: Install essential packages via pacman and yay
install_packages() {
    local packages_pacman=(
        xorg-server xorg-xinit xorg-xrandr xorg-xsetroot noto-fonts noto-fonts-emoji playerctl
        qt6ct breeze-icons pcmanfm arandr nitrogen picom openssh cmus scrot gnupg
        pass brightnessctl mpv dunst unzip nano alsa-utils pavucontrol xarchiver xclip htop curl
        libnotify jq bc reflector
    )
    local packages_yay=(
        ttf-font-awesome ttf-mononoki-nerd maim xautolock rofi fastfetch
    )

    echo "Installing essential packages via pacman..."
    sudo pacman -S --needed --noconfirm "${packages_pacman[@]}"

    echo "Installing essential packages via yay..."
    yay -S --noconfirm "${packages_yay[@]}"
}

# Function: Check for btrfs filesystem and install timeshift-autosnap if found
install_timeshift_if_btrfs() {
    if grep -q 'btrfs' /etc/fstab; then
        echo "btrfs filesystem detected. Installing timeshift-autosnap..."
        yay -S --needed --noconfirm timeshift-autosnap
    else
        echo "No btrfs filesystem detected. Skipping timeshift-autosnap installation."
    fi
}

# Function: Install optional packages based on user choice
install_optional() {
    local prompt="$1"
    local packages_pacman=("${!2}")
    local packages_yay=("${!3}")

    read -p "$prompt [Y/n]: " install_response
    install_response="${install_response,,}" # Convert to lowercase

    if [[ "$install_response" == "y" ]] || [[ -z "$install_response" ]]; then
        if [ ${#packages_pacman[@]} -ne 0 ]; then
            echo "Installing packages via pacman: ${packages_pacman[@]}"
            sudo pacman -S --needed --noconfirm "${packages_pacman[@]}"
        fi
        if [ ${#packages_yay[@]} -ne 0 ]; then
            echo "Installing packages via yay: ${packages_yay[@]}"
            yay -S --noconfirm "${packages_yay[@]}"
        fi
    else
        echo "Skipping installation for this option."
    fi
}

# Function: Clone and install nirucon-sucklessa-arch and related files, scripts and dot files
install_suckless() {
    read -p "Do you want to install suckless dwm, dmenu, st, slock and related configurations, dotfiles and some dmenu scripts? [Y/n]: " choice
    if [[ "$choice" == [Yy]* ]] || [[ -z "$choice" ]]; then
        echo "Installing Suckless utilities and configurations..."
        mkdir -p ~/Git && git clone https://github.com/nirucon/nirucon-suckless-arch ~/Git/nirucon-suckless-arch
        mkdir -p ~/.config/suckless ~/.dwm ~/Music ~/Downloads ~/Pictures ~/Videos ~/Temp ~/.config/dunst

        declare -a repos=("nirubar-dwm" "dunstrc" "nirucon-dmenu" "sverigesradio-dmenu" "srpod-dmenu" "srplay-dmenu" "dwmexit-dmenu" "havamal" "wifi-dmenu" "arch-optimizer-dmenu")
        for repo in "${repos[@]}"; do
            rm -rf ~/Git/$repo
            git clone https://github.com/nirucon/$repo ~/Git/$repo
        done

        cp -rf ~/Git/nirubar-dwm/ ~/Git/nirucon-suckless-arch/dmenu ~/Git/nirucon-suckless-arch/st ~/Git/nirucon-suckless-arch/slock ~/Git/nirucon-suckless-arch/dwm ~/.config/suckless
        cp -rf ~/Git/dunstrc/* ~/.config/dunst
        cp -fr ~/Git/nirucon-suckless-arch/nirucon-greeter ~/.config/

        declare -a suckless_dirs=("dwm" "dmenu" "slock" "st")
        for dir in "${suckless_dirs[@]}"; do
            sudo make -C ~/.config/suckless/$dir clean install
        done

        cp -f ~/Git/nirucon-suckless-arch/.xinitrc ~/
        cp -f ~/Git/nirucon-suckless-arch/autostart.sh ~/.dwm
        cp -f ~/Git/nirucon-suckless-arch/.bashrc ~/
        cp -f ~/Git/nirucon-suckless-arch/.bash_aliases ~/
        cp -rf ~/Git/nirucon-suckless-arch/nirucon-wallpapers ~/Pictures/
        sudo cp -f ~/Git/nirucon-suckless-arch/issue /etc/
        chmod +x ~/.dwm/autostart.sh ~/.config/suckless/nirubar-dwm/nirubar-dwm ~/.config/nirucon-greeter/greeter

        # nirucon-dmenu - dmenu scripts launcher
        echo "Cloning and installing the 'nirucon-dmenu' script..."
        rm -rf ~/Git/nirucon-dmenu
        git clone https://github.com/nirucon/nirucon-dmenu ~/Git/nirucon-dmenu
        sudo cp -f ~/Git/nirucon-dmenu/nirucon-dmenu-scripts-launcher /usr/local/bin/
        sudo chmod +x /usr/local/bin/nirucon-dmenu-scripts-launcher
        rm -rf ~/Git/nirucon-dmenu

        # sverigesradio-dmenu - dmenu script for sveriges radio
        echo "Cloning and installing the 'sverigesradio-dmenu' script..."
        rm -rf ~/Git/sverigesradio-dmenu
        git clone https://github.com/nirucon/sverigesradio-dmenu ~/Git/sverigesradio-dmenu
        sudo cp -f ~/Git/sverigesradio-dmenu/sverigesradio-dmenu /usr/local/bin/
        sudo chmod +x /usr/local/bin/sverigesradio-dmenu
        rm -rf ~/Git/sverigesradio-dmenu

        # srpod-dmenu - dmenu script for sr play pod
        echo "Cloning and installing the 'srpod-dmenu' script..."
        rm -rf ~/Git/srpod-dmenu
        git clone https://github.com/nirucon/srpod-dmenu ~/Git/srpod-dmenu
        sudo cp -f ~/Git/srpod-dmenu/srpod-dmenu /usr/local/bin/
        sudo chmod +x /usr/local/bin/srpod-dmenu
        rm -rf ~/Git/srpod-dmenu

        # srplay-dmenu - dmenu script for sr play podcasts and radio
        echo "Cloning and installing the 'srplay-dmenu' script..."
        rm -rf ~/Git/srplay-dmenu
        git clone https://github.com/nirucon/srplay-dmenu ~/Git/srplay-dmenu
        sudo cp -f ~/Git/srplay-dmenu/srplay-dmenu /usr/local/bin/
        sudo chmod +x /usr/local/bin/srplay-dmenu
        rm -rf ~/Git/srplay-dmenu

        # dwmexit-dmenu - dmenu script for suspend, logout, restart, reboot
        echo "Installing dwmexit-dmenu script..."
        rm -rf ~/Git/dwmexit-dmenu
        git clone https://github.com/nirucon/dwmexit-dmenu ~/Git/dwmexit-dmenu
        sudo cp -f ~/Git/dwmexit-dmenu/dwmexit-dmenu /usr/local/bin/
        sudo chmod +x /usr/local/bin/dwmexit-dmenu
        rm -rf ~/Git/dwmexit-dmenu

        # havamal - script for random quotes in .bashrc
        echo "Installing havamal script..."
        rm -rf ~/Git/havamal
        git clone https://github.com/nirucon/havamal ~/Git/havamal
        mkdir -p ~/.config/havamal
        cp -fr ~/Git/havamal/* ~/.config/havamal/
        chmod +x ~/.config/havamal/havamal
        rm -rf ~/Git/havamal
        echo "The 'havamal' script has been installed and the repository has been removed."

        # wifi-dmenu - script for wifi in dmenu
        echo "Installing wifi-dmenu script..."
        rm -rf ~/Git/wifi-dmenu
        git clone https://github.com/nirucon/wifi-dmenu ~/Git/wifi-dmenu
        sudo cp -f ~/Git/wifi-dmenu/wifi-dmenu /usr/local/bin/
        sudo chmod +x /usr/local/bin/wifi-dmenu
        rm -rf ~/Git/wifi-dmenu

        # arch-optimizer-dmenu - script for optimizing arch linux in dmenu
        echo "Installing arch-optimizer-dmenu script..."
        rm -rf ~/Git/arch-optimizer-dmenu
        git clone https://github.com/nirucon/arch-optimizer-dmenu ~/Git/arch-optimizer-dmenu
        sudo cp -f ~/Git/arch-optimizer-dmenu/arch-optimizer-dmenu /usr/local/bin/
        sudo chmod +x /usr/local/bin/arch-optimizer-dmenu
        rm -rf ~/Git/arch-optimizer-dmenu

        echo "Suckless utilities and configurations installed successfully."
    else
        echo "Skipping Suckless utilities installation."
    fi
}

# Function: Install custom GRUB theme
install_grub_theme() {
    read -p "Do you want to install a custom grub theme - nirucon-death? [Y/n]: " grub_response
    grub_response=${grub_response,,}

    if [[ "$grub_response" =~ ^(yes|y| ) ]] || [[ -z "$grub_response" ]]; then
        echo "Installing custom grub theme..."
        git clone https://github.com/nirucon/nirucon-death-grubtheme ~/Git/nirucon-death-grubtheme
        sudo mkdir -p /boot/grub/themes
        sudo cp -r ~/Git/nirucon-death-grubtheme/nirucon-death /boot/grub/themes/nirucon-death
        sudo sed -i 's|^#GRUB_THEME=.*|GRUB_THEME="/boot/grub/themes/nirucon-death/theme.txt"|' /etc/default/grub
        sudo grub-mkconfig -o /boot/grub/grub.cfg
        echo "Custom grub theme installed."
    else
        echo "Skipping custom grub theme installation."
    fi
}

# Function: Install Graphite GTK Theme (Dark), Tela Circle Icons (Black) and nirucon Rofi Custom Theme
install_themes_icons() {
    read -r -p "Do you want to install the GTK theme and icons? [Y/n]: " gtk_response
    gtk_response=${gtk_response,,}
    read -r -p "Do you want to install the Rofi custom theme? [Y/n]: " rofi_response
    rofi_response=${rofi_response,,}

    if [[ "$gtk_response" =~ ^(yes|y| ) ]] || [[ -z "$gtk_response" ]]; then
        echo "Installing Graphite GTK theme (Dark)..."
        git clone https://github.com/vinceliuice/Graphite-gtk-theme
        if [ -d "Graphite-gtk-theme" ]; then
            cd Graphite-gtk-theme
            sudo ./install.sh -d /usr/share/themes -c dark
            cd ..
            rm -rf Graphite-gtk-theme
        else
            echo "Failed to clone Graphite GTK theme repository. Please check your internet connection."
            exit 1
        fi

        echo "Installing Tela Circle icon theme (Black)..."
        git clone https://github.com/vinceliuice/Tela-circle-icon-theme
        if [ -d "Tela-circle-icon-theme" ]; then
            cd Tela-circle-icon-theme
            sudo ./install.sh -a
            cd ..
            rm -rf Tela-circle-icon-theme
        else
            echo "Failed to clone Tela Circle icon theme repository. Please check your internet connection."
            exit 1
        fi

        # Debugging: Print the paths where the themes and icons might be located
        echo "Checking for installed themes and icons in common directories..."

        echo "Contents of $HOME/.themes:"
        ls -la $HOME/.themes

        echo "Contents of $HOME/.local/share/themes:"
        ls -la $HOME/.local/share/themes

        echo "Contents of $XDG_DATA_HOME/themes:"
        ls -la $XDG_DATA_HOME/themes

        echo "Contents of $HOME/.local/share/icons:"
        ls -la $HOME/.local/share/icons

        echo "Contents of $XDG_DATA_HOME/icons:"
        ls -la $XDG_DATA_HOME/icons

        echo "Contents of /usr/share/themes:"
        ls -la /usr/share/themes

        echo "Contents of /usr/share/icons:"
        ls -la /usr/share/icons

        # Moving themes and icons to the correct directories
        echo "Moving themes and icons to the correct directories..."
        sudo mkdir -p /usr/share/themes /usr/share/icons

        # Copying Graphite theme to /usr/share/themes
        if [ -d "$HOME/.themes/Graphite-dark" ]; then
            sudo cp -r "$HOME/.themes/Graphite-dark" /usr/share/themes/
        elif [ -d "$HOME/.local/share/themes/Graphite-dark" ]; then
            sudo cp -r "$HOME/.local/share/themes/Graphite-dark" /usr/share/themes/
        elif [ -d "$XDG_DATA_HOME/themes/Graphite-dark" ]; then
            sudo cp -r "$XDG_DATA_HOME/themes/Graphite-dark" /usr/share/themes/
        fi

        # Copying Tela icons to /usr/share/icons
        if [ -d "$HOME/.local/share/icons/Tela-black" ]; then
            sudo cp -r "$HOME/.local/share/icons/Tela-black" /usr/share/icons/
        elif [ -d "$XDG_DATA_HOME/icons/Tela-black" ]; then
            sudo cp -r "$XDG_DATA_HOME/icons/Tela-black" /usr/share/icons/
        elif [ -d "$HOME/.icons/Tela-black" ]; then
            sudo cp -r "$HOME/.icons/Tela-black" /usr/share/icons/
        fi

        # Set GTK themes in the configuration files
        mkdir -p ~/.config/gtk-3.0/
        mkdir -p ~/.config/gtk-4.0/

        # GTK2 settings
        echo 'gtk-theme-name="Graphite-dark"' > ~/.gtkrc-2.0
        echo 'gtk-icon-theme-name="Tela-black"' >> ~/.gtkrc-2.0

        # GTK3 settings
        cat <<EOF > ~/.config/gtk-3.0/settings.ini
[Settings]
gtk-theme-name=Graphite-dark
gtk-icon-theme-name=Tela-black
EOF

        # GTK4 settings
        cat <<EOF > ~/.config/gtk-4.0/settings.ini
[Settings]
gtk-theme-name=Graphite-dark
gtk-icon-theme-name=Tela-black
EOF

        # Insert environment variables into .xinitrc
        if ! grep -q 'export GTK_THEME="Graphite-dark"' ~/.xinitrc; then
            sed -i '/# Set default GTK and Icon themes/a \
export GTK_THEME="Graphite-dark" \
export GTK2_RC_FILES="$HOME/.gtkrc-2.0" \
export GTK3_SETTINGS="$HOME/.config/gtk-3.0/settings.ini" \
export GTK4_SETTINGS="$HOME/.config/gtk-4.0/settings.ini"' ~/.xinitrc
        fi

        echo "Theme set to Graphite-dark and icon theme set to Tela-black."
    else
        echo "Skipping GTK theme and icons installation."
    fi

    if [[ "$rofi_response" =~ ^(yes|y| ) ]] || [[ -z "$rofi_response" ]]; then
        echo "Installing and setting the Rofi custom theme..."
        sudo mkdir -p /usr/share/rofi/themes
        mkdir -p ~/.config/rofi

        wget -O /tmp/nirucon.rasi https://raw.githubusercontent.com/nirucon/nirucon-rofi/master/nirucon.rasi
        if [ $? -eq 0 ]; then
            sudo mv -f /tmp/nirucon.rasi /usr/share/rofi/themes/
        else
            echo "Failed to download Rofi theme. Please check the URL or your internet connection."
            exit 1
        fi

        wget -O /tmp/config.rasi https://raw.githubusercontent.com/nirucon/nirucon-rofi/master/config.rasi
        if [ $? -eq 0 ]; then
            mv -f /tmp/config.rasi ~/.config/rofi/config.rasi
        else
            echo "Failed to download default Rofi configuration. Please check the URL or your internet connection."
            exit 1
        fi
    else
        echo "Skipping Rofi custom theme installation."
    fi
}

# Main function to execute the script
main() {
    check_internet_connection
    display_welcome
    confirm_proceed

    install_if_needed "git"
    install_if_needed "wget"
    sudo pacman -S --needed --noconfirm base-devel
    install_yay

    read -p "Do you want to optimize and update the system before installing additional applications? [Y/n]: " optimize_choice
    if [[ "$optimize_choice" != [Nn]* ]]; then
        optimize_pacman_conf
        sudo pacman -S --needed --noconfirm pacman-contrib
        sudo systemctl enable paccache.timer
        sudo pacman -Syu
    fi

    install_packages
    install_timeshift_if_btrfs

    local browser_pacman=()
    local browser_yay=(brave-bin)
    install_optional "Do you want to install Brave browser?" browser_pacman[@] browser_yay[@]

    local music_streaming_pacman=()
    local music_streaming_yay=(spotify)
    install_optional "Do you want to install Spotify?" music_streaming_pacman[@] music_streaming_yay[@]

    local nextcloud_sync_pacman=(nextcloud-client)
    local nextcloud_sync_yay=()
    install_optional "Do you want to install Nextcloud client?" nextcloud_sync_pacman[@] nextcloud_sync_yay[@]

    local daw_apps_pacman=()
    local daw_apps_yay=(reaper qpwgraph yabridge yabridgectl realtime-privileges)
    install_optional "Do you want to install DAW apps (reaper qpwgraph yabridge yabridgectl realtime-privileges)?" daw_apps_pacman[@] daw_apps_yay[@]

    local daw_plugins_pacman=()
    local daw_plugins_yay=(pro-audio lv2-plugins vst-plugins vst3-plugins)
    install_optional "Do you want to install DAW plugins (lots of lv2 and vst plugins)?" daw_plugins_pacman[@] daw_plugins_yay[@]

    local web_dev_pacman=(filezilla bluefish)
    local web_dev_yay=()
    install_optional "Do you want to install Web development apps (bluefish filezilla)?" web_dev_pacman[@] web_dev_yay[@]

    local image_video_pacman=(obs-studio kdenlive gimp)
    local image_video_yay=()
    install_optional "Do you want to install Image and Video editing apps (obs-studio kdenlive gimp)?" image_video_pacman[@] image_video_yay[@]

    local communication_pacman=(thunderbird irssi signal-desktop)
    local communication_yay=()
    install_optional "Do you want to install Communication apps (thunderbird irssi signal-desktop)?" communication_pacman[@] communication_yay[@]

    install_suckless
    install_grub_theme
    install_themes_icons

    echo "Cleaning up temporary files..."
    rm -fr ~/Git/dunstrc ~/Git/nirubar-dwm ~/Git/nirucon-suckless-arch ~/Git/nirucon-death-grubtheme
    echo "NIRUCON-ALPI Arch Linux Post Install Script completed - NOW BE CREATIVE!"
    echo "You can now start suckless-nirucon-arch with the command: startx"
}

main
