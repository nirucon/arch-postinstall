#!/bin/bash

# nirucon-alpi - Arch Linux Post Installation script by Nicklas Rudolfsson
# https://github.com/nirucon
# Made for my self for my own use with Arch Linux but feel free to use and modify
# Script version 2024-07-31.02

# 1: Welcome

# Function to display the welcome message
display_welcome() {
    echo -e "       _\n _ __ (_)_ __ _   _  ___ ___  _ ___\n| '_ \\| | '__| | | |/ __/ _ \\| '_  |\n| | | | | |  | |_| | (__| (_) | | | |\n|_| |_|_|_|   \\__,_|\\___\\___/|_| |_| \nArch Linux Post Install"
    echo "Welcome to NIRUCON-ALPI - Nicklas Rudolfsson's post-install script of 'My Suckless Setup' for Arch Linux."
    echo "This is tailored for MY own needs (focus on noir theming and music and media production). Feel free to use and modify, but I disclaim all responsibility; proceed at your own risk!"
    echo "Contact me via: n@rudolfsson.net"
    echo "Script version: 2024-07-31.01"
    echo ""
}

# Function to confirm continuation of the installation
confirm_installation() {
    read -p "Are you sure you want to continue with the installation? [Y/n]: " confirm_install
    if [[ "$confirm_install" =~ ^[Nn]$ ]]; then
        echo "Too bad! Maybe another time ;)"
        exit 0
    else
        echo "Alright, let's have some fun! Keep an eye on the screen as you will need to answer some Yes or No questions... Let's go!"
    fi
}

display_welcome
confirm_installation

# 2: Install "core" packages and other necessary packages and applications

# Function to install a package if it's not already installed
install_if_needed() {
    local package=$1
    if ! command -v "$package" &>/dev/null; then
        echo "Installing $package..."
        sudo pacman -S --needed --noconfirm "$package"
    else
        echo "$package is already installed"
    fi
}

# Function to install yay (AUR helper)
install_yay() {
    if ! command -v yay &>/dev/null; then
        echo "Installing AUR helper yay..."
        cd /opt || exit
        sudo git clone https://aur.archlinux.org/yay.git
        sudo chown -R $(whoami):$(whoami) yay
        cd yay || exit
        makepkg -si
        cd ~ || exit
    else
        echo "yay is already installed"
    fi
}

echo "Checking and installing (if needed) git, wget, and AUR helper yay along with dependencies..."
install_if_needed "git"
install_if_needed "wget"

echo "Installing base-devel..."
sudo pacman -S --needed --noconfirm base-devel

install_yay

# 3: System optimization

echo "The following optimizations and updates will be performed if you choose to optimize the system:"
echo "1. Enable parallel downloads in pacman.conf"
echo "2. Enable Color, ILoveCandy, and VerbosePkgLists in pacman.conf"
echo "3. Install pacman-contrib for additional pacman utilities"
echo "4. Enable paccache.timer for automatic cleaning of the package cache"
echo "5. Update the system"

read -p "Do you want to optimize and update the system before installing additional applications? [Y/n]: " optimize_choice
if [[ "$optimize_choice" != [Nn]* ]]; then
    echo "Optimizing system..."

    # Function to ensure a line is present in a given section of a file
    ensure_line() {
        local line="$1"
        local file="$2"
        local section="$3"
        
        if grep -q "\[$section\]" "$file"; then
            if ! grep -q "^$line" "$file"; then
                echo "Adding '$line' to the section [$section]."
                sudo sed -i "/\[$section\]/a $line" "$file"
            fi
        else
            echo "Section [$section] not found. Adding section and line."
            echo -e "\n[$section]\n$line" | sudo tee -a "$file" >/dev/null
        fi
    }

    file="/etc/pacman.conf"

    # Enable parallel downloads, Color, ILoveCandy, and VerbosePkgLists in pacman.conf
    echo "Enabling parallel downloads, Color, ILoveCandy, and VerbosePkgLists in pacman.conf..."
    ensure_line "ParallelDownloads = 5" "$file" "options"
    ensure_line "Color" "$file" "options"
    ensure_line "ILoveCandy" "$file" "options"
    ensure_line "VerbosePkgLists" "$file" "options"

    echo "pacman.conf configuration update complete."

    # Install pacman-contrib and enable paccache.timer
    echo "Installing pacman-contrib and enabling paccache.timer for automatic package cache cleaning..."
    sudo pacman -S --needed --noconfirm pacman-contrib
    sudo systemctl enable --now paccache.timer

    # Update the system
    echo "Updating the system..."
    sudo pacman -Syu
else
    echo "Skipping system optimization."
fi

# 4: Installation of essential packages and applications

# Function to install packages
install_packages() {
	local package_manager="$1"
	shift
	local packages=("$@")
	echo "Installing packages via $package_manager: ${packages[*]}"
	if [[ "$package_manager" == "pacman" ]]; then
		sudo pacman -S --needed --noconfirm "${packages[@]}"
	elif [[ "$package_manager" == "yay" ]]; then
		yay -S --needed --noconfirm "${packages[@]}"
	fi
}

# Essential packages
essential_packages=(
	xorg-server xorg-xinit xorg-xrandr xorg-xsetroot noto-fonts noto-fonts-emoji playerctl
	lxappearance qt6ct breeze-icons pcmanfm arandr nitrogen picom openssh cmus scrot gnupg
	pass brightnessctl mpv dunst unzip nano alsa-utils pavucontrol xarchiver xclip htop curl
	libnotify jq bc vim nano
)

# AUR packages
aur_packages=(
	ttf-font-awesome ttf-mononoki-nerd maim xautolock rofi fastfetch
)

# Install essential packages via pacman
install_packages "pacman" "${essential_packages[@]}"

# Install AUR packages via yay
install_packages "yay" "${aur_packages[@]}"

# Check if btrfs and install timeshift-autosnap
if grep -q 'btrfs' /etc/fstab; then
	echo "btrfs filesystem detected. Installing timeshift-autosnap..."
	install_packages "yay" "timeshift-autosnap"
else
	echo "No btrfs filesystem detected. Skipping timeshift-autosnap installation."
fi

# 5: Optional installations of packages and applications

echo "Now you will go through a series of options for various categories of applications that can be installed based on your needs."

# Function to handle user choices for optional packages
install_optional() {
    local prompt="$1"
    shift
    local packages=("$@")

    read -p "$prompt [Y/n]: " install_response
    install_response="${install_response,,}" # Convert to lowercase

    if [[ "$install_response" == "y" ]] || [[ -z "$install_response" ]]; then
        for package in "${packages[@]}"; do
            if pacman -Qi "$package" &>/dev/null || yay -Qi "$package" &>/dev/null; then
                echo "$package is already installed"
            else
                if sudo pacman -Ssq "^$package\$" &>/dev/null; then
                    echo "Installing $package via pacman..."
                    sudo pacman -S --needed --noconfirm "$package"
                else
                    echo "Installing $package via yay..."
                    yay -S --needed --noconfirm "$package"
                fi
            fi
        done
        return 0
    else
        echo "Skipping installation for this option."
        return 1
    fi
}

# Internet browser
install_optional "Do you want to install Brave browser?" brave-bin

# Music streaming
install_optional "Do you want to install Spotify?" spotify

# Nextcloud file synchronization
install_optional "Do you want to install Nextcloud client?" nextcloud-client

# DAW Apps
if install_optional "Do you want to install DAW apps?" reaper qpwgraph yabridge yabridgectl realtime-privileges; then
    # DAW Apps configuration if DAW apps are installed
    if command -v pipewire &>/dev/null; then
        echo "Configuring Pipewire latency scripts..."
        sudo bash -c 'echo "PIPEWIRE_LATENCY=128/48000 reaper" > /usr/local/bin/reaper-pipewire-latency-128'
        sudo bash -c 'echo "PIPEWIRE_LATENCY=256/48000 reaper" > /usr/local/bin/reaper-pipewire-latency-256'
        sudo chmod +x /usr/local/bin/reaper-pipewire-latency-128 /usr/local/bin/reaper-pipewire-latency-256
    fi

    echo "Configuring realtime-privileges..."
    if ! grep -q '^realtime:' /etc/group; then
        sudo groupadd realtime
    fi
    sudo usermod -a -G realtime "$USER"
fi

# DAW Plugins
install_optional "Do you want to install DAW plugins?" pro-audio lv2-plugins vst-plugins vst3-plugins

# Web Development
install_optional "Do you want to install Web development apps?" filezilla bluefish

# Image and Video Editing
install_optional "Do you want to install Image and Video editing apps?" obs-studio kdenlive gimp

# Communication
install_optional "Do you want to install Communication apps?" thunderbird irssi signal-desktop

# 6: nirucon-suckles-arch setup

read -p "Do you want to install suckless dwm, dmenu, st, slock, nirubar-dwm, dmenu scripts, my dot-files, and some related stuff? [Y/n]: " choice
if [[ "$choice" =~ ^[Yy]$ ]] || [[ -z "$choice" ]]; then
    echo "Installing Suckless etc..."

    # Define a function for cloning and handling repositories
    clone_repo() {
        local repo_url="$1"
        local dest_dir="$2"
        
        if [ -d "$dest_dir" ]; then
            rm -rf "$dest_dir"
        fi
        
        git clone "$repo_url" "$dest_dir"
    }

    # Define a function to compile and install suckless software
    compile_install() {
        local dir="$1"
        sudo make -C "$dir" clean install
    }

    echo "Creating ~/Git (if it does not exist) and cloning the nirucon suckless-arch repository..."
    mkdir -p ~/Git && clone_repo "https://github.com/nirucon/nirucon-suckless-arch" "~/Git/nirucon-suckless-arch"

    # Create necessary directories
    mkdir -p ~/.config/suckless ~/.dwm ~/Music ~/Downloads ~/Pictures ~/Videos ~/Temp ~/.config/dunst

    # Clone additional script repositories
    clone_repo "https://github.com/nirucon/nirubar-dwm" "~/Git/nirubar-dwm"
    clone_repo "https://github.com/nirucon/dunstrc" "~/Git/dunstrc"

    # Copy suckless related files
    cp -rf ~/Git/nirubar-dwm/ ~/Git/nirucon-suckless-arch/{dmenu,st,slock,dwm} ~/.config/suckless
    cp -rf ~/Git/dunstrc/* ~/.config/dunst
    cp -rf ~/Git/nirucon-suckless-arch/nirucon-greeter ~/.config/

    # Compile and install suckless software
    for app in dwm dmenu slock st; do
        compile_install ~/.config/suckless/$app
    done

    # Copy configurations and dot files
    cp -f ~/Git/nirucon-suckless-arch/{.xinitrc,.bashrc,.bash_aliases} ~/
    cp -f ~/Git/nirucon-suckless-arch/autostart.sh ~/.dwm
    cp -rf ~/Git/nirucon-suckless-arch/nirucon-wallpapers ~/Pictures/
    sudo cp -f ~/Git/nirucon-suckless-arch/issue /etc/
    chmod +x ~/.dwm/autostart.sh ~/.config/suckless/nirubar-dwm/nirubar-dwm ~/.config/nirucon-greeter/greeter

    # Define an array of scripts to be cloned and installed
    declare -A scripts=(
        ["sverigesradio-dmenu"]="https://github.com/nirucon/sverigesradio-dmenu"
        ["srpod-dmenu"]="https://github.com/nirucon/srpod-dmenu"
        ["dwmexit-dmenu"]="https://github.com/nirucon/dwmexit-dmenu"
        ["havamal"]="https://github.com/nirucon/havamal"
        ["wifi-dmenu"]="https://github.com/nirucon/wifi-dmenu"
        ["arch-optimizer-dmenu"]="https://github.com/nirucon/arch-optimizer-dmenu"
    )

    # Clone, install, and clean up scripts
    for script in "${!scripts[@]}"; do
        clone_repo "${scripts[$script]}" "~/Git/$script"
        cd ~/Git/$script
        sudo cp -f $script /usr/local/bin/
        sudo chmod +x /usr/local/bin/$script
        cd ~
        rm -rf ~/Git/$script
        echo "The '$script' script has been installed and the repository has been removed."
    done

    # Setting up cmus themes
    echo "Setting up cmus themes..."
    mkdir -p ~/.config/cmus/
    cp -f ~/Git/nirucon-suckless-arch/.config/cmus/* ~/.config/cmus/
fi

# 7: Theming

# Function to install a Git repository
install_git_repo() {
    local repo_url=$1
    local target_dir=$2

    if git clone "$repo_url" "$target_dir"; then
        echo "Cloned repository from $repo_url to $target_dir"
    else
        echo "Failed to clone repository from $repo_url. Skipping..."
        return 1
    fi
}

# Function to install the Rofi theme
install_rofi_theme() {
    local theme_url=$1
    local config_url=$2

    echo "Installing Rofi custom theme..."
    sudo mkdir -p /usr/share/rofi/themes
    mkdir -p ~/.config/rofi

    if wget -O /tmp/nirucon.rasi "$theme_url"; then
        sudo mv -f /tmp/nirucon.rasi /usr/share/rofi/themes/
        echo "Rofi theme downloaded and moved successfully."
    else
        echo "Failed to download Rofi theme. Skipping..."
        return 1
    fi

    if wget -O /tmp/config.rasi "$config_url"; then
        mv -f /tmp/config.rasi ~/.config/rofi/config.rasi
        echo "Rofi default configuration downloaded and set successfully."
    else
        echo "Failed to download default Rofi configuration. Skipping..."
        return 1
    fi
}

# Function to install GTK theme and icons
install_gtk_and_icons() {
    local theme_url=$1
    local icon_url=$2
    local theme_dir=$3
    local icon_dir=$4

    echo "Installing GTK theme and icons..."

    if git clone "$theme_url" equilux-theme && [ -d "equilux-theme" ]; then
        cd equilux-theme || return 1
        sudo ./install.sh
        cd .. || return 1
        rm -rf equilux-theme
        echo "Equilux theme installed successfully."
    else
        echo "Failed to clone Equilux theme repository. Skipping..."
    fi

    if git clone "$icon_url" plasmoid-papirus-dark-grey-icon-theme && [ -d "plasmoid-papirus-dark-grey-icon-theme" ]; then
        sudo mkdir -p "$icon_dir"
        sudo cp -r plasmoid-papirus-dark-grey-icon-theme/Papirus-Dark-Grey/* "$icon_dir/"
        rm -rf plasmoid-papirus-dark-grey-icon-theme
        echo "Papirus Dark Grey icons installed successfully."
    else
        echo "Failed to clone Papirus Dark Grey icons repository. Skipping..."
    fi

    if command -v lxappearance >/dev/null 2>&1; then
        mkdir -p ~/.config/gtk-3.0/
        cat <<EOF >~/.config/gtk-3.0/settings.ini
[Settings]
gtk-theme-name=Equilux
gtk-icon-theme-name=Papirus-Dark-Grey
EOF
        echo "GTK theme and icons set successfully!"
    else
        echo "lxappearance is not installed. Please install it to set the theme and icons."
    fi
}

echo "Starting theming installation..."

# Install custom GRUB theme
read -p "Do you want to install a custom grub theme - nirucon-death? [Y/n]: " grub_response
if [[ "$grub_response" =~ ^[Yy]$ ]] || [[ -z "$grub_response" ]]; then
    echo "Installing custom grub theme..."
    install_git_repo "https://github.com/nirucon/nirucon-death-grubtheme" "~/Git/nirucon-death-grubtheme"

    sudo mkdir -p /boot/grub/themes
    sudo cp -r ~/Git/nirucon-death-grubtheme/nirucon-death /boot/grub/themes/nirucon-death
    sudo sed -i 's|^#GRUB_THEME=.*|GRUB_THEME="/boot/grub/themes/nirucon-death/theme.txt"|' /etc/default/grub
    sudo grub-mkconfig -o /boot/grub/grub.cfg
    echo "Custom grub theme installed."
else
    echo "Skipping custom grub theme installation."
fi

# Install GTK theme and icons
read -r -p "Do you want to install the GTK theme and icons? [Y/n]: " gtk_response
if [[ "$gtk_response" =~ ^[Yy]$ ]] || [[ -z "$gtk_response" ]]; then
    install_gtk_and_icons \
        "https://github.com/ddnexus/equilux-theme" \
        "https://github.com/Intika-KDE-Plasmoids/plasmoid-papirus-dark-grey-icon-theme" \
        "/usr/share/icons/Papirus-Dark-Grey"
else
    echo "Skipping GTK theme and icons installation."
fi

# Install Rofi theme
read -r -p "Do you want to install the Rofi custom theme? [Y/n]: " rofi_response
if [[ "$rofi_response" =~ ^[Yy]$ ]] || [[ -z "$rofi_response" ]]; then
    install_rofi_theme \
        "https://raw.githubusercontent.com/nirucon/nirucon-rofi/master/nirucon.rasi" \
        "https://raw.githubusercontent.com/nirucon/nirucon-rofi/master/config.rasi"
else
    echo "Skipping Rofi custom theme installation."
fi

# 8: Final clean up

# Function to clean up temporary files
cleanup_temp_files() {
    local directories=("dunstrc" "nirubar-dwm" "nirucon-suckless-arch" "nirucon-death-grubtheme")
    echo "Cleaning up temporary files..."

    for dir in "${directories[@]}"; do
        local path=~/Git/$dir
        if [ -d "$path" ]; then
            rm -rf "$path"
            echo "Removed $path"
        else
            echo "$path does not exist"
        fi
    done

    echo "All cloned and downloaded files in ~/Git have been deleted, except for the nirucon-alpi directory."
    echo "Check for new versions of the script at https://github.com/nirucon/nirucon-alpi"
}

cleanup_temp_files

# 9: Good buy
echo "NIRUCON-ALPI Arch Linux Post Install Script Completed - NOW BE CREATIVE!"
